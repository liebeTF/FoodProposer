package com.example.foodlog;

import java.util.List;

import com.example.foodlog.db.FoodDataDao;
import com.example.foodlog.db.FoodData;
import com.example.foodlog.R;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;

/**
 * 一覧表示アクティビティ
 */
public class FoodListActivity extends Activity implements OnItemClickListener{
	static FoodDataDao dao;
	
	
    // 一覧表示用ListView
    private ListView listView = null;
    private ArrayAdapter<FoodData> arrayAdapter = null;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // 自動生成されたR.javaの定数を指定してXMLからレイアウトを生成
        setContentView(R.layout.food_list);

        // XMLで定義したandroid:idの値を指定してListViewを取得します。
        listView = (ListView) findViewById(R.id.list);

        // ListViewに表示する要素を保持するアダプタを生成します。
//        arrayAdapter = new ArrayAdapter<FoodData>(this,android.R.layout.simple_list_item_1);
        arrayAdapter = new ArrayAdapter<FoodData>(this,android.R.layout.simple_list_item_1);

        // アダプタを設定
        listView.setAdapter(arrayAdapter);
        
        // リスナの追加
        listView.setOnItemClickListener( this);
  
    }
	
	/**
	 * アクティビティが前面に来るたびにデータを更新
	 */
	@Override
	protected void onResume() {
	        super.onResume();

	        // データ取得タスクの実行
	        DataLoadTask task = new DataLoadTask();
	        task.execute();
	}

	/**
	 * 一覧データの取得と表示を行うタスク
	 */
	public class DataLoadTask extends AsyncTask<Object, Integer, List<FoodData>> {
	        // 処理中ダイアログ
	        private ProgressDialog progressDialog = null;

	        @Override
	        protected void onPreExecute() {
	                // バックグラウンドの処理前にUIスレッドでダイアログ表示
	                progressDialog = new ProgressDialog(FoodListActivity.this);
	                progressDialog.setMessage(getResources().getText(
	                                R.string.data_loading));
	                progressDialog.setIndeterminate(true);
	                progressDialog.show();
	        }
	
	        @Override
	        protected List<FoodData> doInBackground(Object... params) {
	            // 一覧データの取得をバックグラウンドで実行
	        	if(dao==null)
	                dao = new FoodDataDao(FoodListActivity.this);
	        	return dao.list();
	        }

	        @Override
	        protected void onPostExecute(List<FoodData> result) {
	                // 処理中ダイアログをクローズ
	                progressDialog.dismiss();

	                // 表示データのクリア
	                arrayAdapter.clear();

	                // 表示データの設定
	                for (FoodData record : result) {
	                        arrayAdapter.add(record);
	                }
	        }
	}
    /**
     * List要素クリック時の処理
     * 選択されたエンティティを詰めて参照画面へ遷移する
     */
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        // 選択された要素を取得する
        FoodData data = (FoodData)parent.getItemAtPosition( position);
        Intent foodIntent = new Intent( this, FoodRegistActivity.class);
        foodIntent.putExtra(FoodData.TABLE_NAME, data);
		startActivity( foodIntent);   	
    }
    /**
     * オプションメニューの生成
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        // XMLで定義したmenuを指定する。
        inflater.inflate(R.menu.food_list, menu);
        return true;
    }
    /**
     * オプションメニューの選択
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int itemId = item.getItemId();
        switch (itemId) {
        case R.id.menu_new:
       
            break;
        }
        return true;
    };
}